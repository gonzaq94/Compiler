# 1 "pfx/pfxLexer.mll"
 

  open PfxParser

  let mk_int nb loc =
    try INT (int_of_string nb)
    with Failure _ -> raise (LexingII.Error(Printf.sprintf "Illegal integer '%s': " nb,loc))

# 11 "pfx/pfxLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\242\255\000\000\000\000\000\000\001\000\002\000\002\000\
    \010\000\001\000\253\255\006\000\255\255\001\000\006\000\003\000\
    \250\255\001\000\001\000\249\255\001\000\245\255\000\000\248\255\
    \002\000\247\255\001\000\246\255\001\000\010\000\244\255\000\000\
    \243\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\013\000\013\000\013\000\013\000\013\000\013\000\
    \004\000\013\000\255\255\001\000\255\255\000\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\014\000\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \255\255\000\000\255\255\000\000\255\255\255\255\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\011\000\012\000\012\000\011\000\013\000\011\000\011\000\
    \255\255\000\000\011\000\255\255\011\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\009\000\014\000\000\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\020\000\019\000\004\000\026\000\015\000\016\000\
    \032\000\024\000\000\000\000\000\023\000\005\000\027\000\029\000\
    \002\000\021\000\003\000\006\000\031\000\028\000\022\000\018\000\
    \025\000\017\000\030\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\013\000\000\000\000\000\000\000\011\000\
    \014\000\255\255\011\000\014\000\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\011\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\009\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\017\000\018\000\000\000\003\000\007\000\015\000\
    \031\000\004\000\255\255\255\255\022\000\000\000\026\000\002\000\
    \000\000\020\000\000\000\000\000\028\000\002\000\005\000\006\000\
    \024\000\006\000\029\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\014\000\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 18 "pfx/pfxLexer.mll"
            ( Location.incr_line lexbuf; token lexbuf )
# 122 "pfx/pfxLexer.ml"

  | 1 ->
# 20 "pfx/pfxLexer.mll"
            ( token lexbuf )
# 127 "pfx/pfxLexer.ml"

  | 2 ->
# 22 "pfx/pfxLexer.mll"
             ( EOF )
# 132 "pfx/pfxLexer.ml"

  | 3 ->
# 24 "pfx/pfxLexer.mll"
                            ( token lexbuf )
# 137 "pfx/pfxLexer.ml"

  | 4 ->
let
# 26 "pfx/pfxLexer.mll"
               nb
# 143 "pfx/pfxLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 26 "pfx/pfxLexer.mll"
                            ( mk_int nb (Location.curr lexbuf))
# 147 "pfx/pfxLexer.ml"

  | 5 ->
# 28 "pfx/pfxLexer.mll"
           (ADD)
# 152 "pfx/pfxLexer.ml"

  | 6 ->
# 29 "pfx/pfxLexer.mll"
           (SUB)
# 157 "pfx/pfxLexer.ml"

  | 7 ->
# 30 "pfx/pfxLexer.mll"
           (MUL)
# 162 "pfx/pfxLexer.ml"

  | 8 ->
# 31 "pfx/pfxLexer.mll"
           (DIV)
# 167 "pfx/pfxLexer.ml"

  | 9 ->
# 32 "pfx/pfxLexer.mll"
           (REM)
# 172 "pfx/pfxLexer.ml"

  | 10 ->
# 33 "pfx/pfxLexer.mll"
            (SWAP)
# 177 "pfx/pfxLexer.ml"

  | 11 ->
# 34 "pfx/pfxLexer.mll"
           (POP)
# 182 "pfx/pfxLexer.ml"

  | 12 ->
# 35 "pfx/pfxLexer.mll"
           (PUSH)
# 187 "pfx/pfxLexer.ml"

  | 13 ->
let
# 37 "pfx/pfxLexer.mll"
         c
# 193 "pfx/pfxLexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 37 "pfx/pfxLexer.mll"
            (
      raise (LexingII.Error(Printf.sprintf "Illegal character '%c': " c, Location.curr lexbuf))
    )
# 199 "pfx/pfxLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

